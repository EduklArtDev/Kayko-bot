{
  "version": 3,
  "sources": ["../esm/instagram.js"],
  "sourcesContent": ["import axios from 'axios';\nimport qs from 'qs';\n//Main function\nexport async function instagramGetUrl(url_media) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            url_media = await checkRedirect(url_media);\n            const SHORTCODE = getShortcode(url_media);\n            const INSTAGRAM_REQUEST = await instagramRequest(SHORTCODE);\n            const OUTPUT_DATA = createOutputData(INSTAGRAM_REQUEST);\n            resolve(OUTPUT_DATA);\n        }\n        catch (err) {\n            let error = {\n                error: err.message\n            };\n            reject(error);\n        }\n    });\n}\n//Utilities\nasync function checkRedirect(url) {\n    let split_url = url.split(\"/\");\n    if (split_url.includes(\"share\")) {\n        let res = await axios.get(url);\n        return res.request.path;\n    }\n    return url;\n}\nfunction formatPostInfo(requestData) {\n    try {\n        let mediaCapt = requestData.edge_media_to_caption.edges;\n        const capt = (mediaCapt.length === 0) ? \"\" : mediaCapt[0].node.text;\n        return {\n            owner_username: requestData.owner.username,\n            owner_fullname: requestData.owner.full_name,\n            is_verified: requestData.owner.is_verified,\n            is_private: requestData.owner.is_private,\n            likes: requestData.edge_media_preview_like.count,\n            is_ad: requestData.is_ad,\n            caption: capt\n        };\n    }\n    catch (err) {\n        throw new Error(`Failed to format post info: ${err.message}`);\n    }\n}\nfunction formatMediaDetails(mediaData) {\n    try {\n        if (mediaData.is_video) {\n            return {\n                type: \"video\",\n                dimensions: mediaData.dimensions,\n                video_view_count: mediaData.video_view_count,\n                url: mediaData.video_url,\n                thumbnail: mediaData.display_url\n            };\n        }\n        else {\n            return {\n                type: \"image\",\n                dimensions: mediaData.dimensions,\n                url: mediaData.display_url\n            };\n        }\n    }\n    catch (err) {\n        throw new Error(`Failed to format media details: ${err.message}`);\n    }\n}\nfunction getShortcode(url) {\n    try {\n        let split_url = url.split(\"/\");\n        let post_tags = [\"p\", \"reel\", \"tv\", \"reels\"];\n        let index_shortcode = split_url.findIndex(item => post_tags.includes(item)) + 1;\n        let shortcode = split_url[index_shortcode];\n        return shortcode;\n    }\n    catch (err) {\n        throw new Error(`Failed to obtain shortcode: ${err.message}`);\n    }\n}\nfunction isSidecar(requestData) {\n    try {\n        return requestData[\"__typename\"] == \"XDTGraphSidecar\";\n    }\n    catch (err) {\n        throw new Error(`Failed sidecar verification: ${err.message}`);\n    }\n}\nasync function instagramRequest(shortcode) {\n    var _a;\n    try {\n        const BASE_URL = \"https://www.instagram.com/graphql/query\";\n        const INSTAGRAM_DOCUMENT_ID = \"8845758582119845\";\n        let dataBody = qs.stringify({\n            'variables': JSON.stringify({\n                'shortcode': shortcode,\n                'fetch_tagged_user_count': null,\n                'hoisted_comment_id': null,\n                'hoisted_reply_id': null\n            }),\n            'doc_id': INSTAGRAM_DOCUMENT_ID\n        });\n        let config = {\n            method: 'post',\n            maxBodyLength: Infinity,\n            url: BASE_URL,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            data: dataBody\n        };\n        const { data } = await axios.request(config);\n        if (!((_a = data.data) === null || _a === void 0 ? void 0 : _a.xdt_shortcode_media))\n            throw new Error(\"Only posts/reels supported, check if your link is valid.\");\n        return data.data.xdt_shortcode_media;\n    }\n    catch (err) {\n        throw new Error(`Failed instagram request: ${err.message}`);\n    }\n}\nfunction createOutputData(requestData) {\n    try {\n        let url_list = [], media_details = [];\n        const IS_SIDECAR = isSidecar(requestData);\n        if (IS_SIDECAR) {\n            //Post with sidecar\n            requestData.edge_sidecar_to_children.edges.forEach((media) => {\n                media_details.push(formatMediaDetails(media.node));\n                if (media.node.is_video) { //Sidecar video item\n                    url_list.push(media.node.video_url);\n                }\n                else { //Sidecar image item\n                    url_list.push(media.node.display_url);\n                }\n            });\n        }\n        else {\n            //Post without sidecar\n            media_details.push(formatMediaDetails(requestData));\n            if (requestData.is_video) { // Video media\n                url_list.push(requestData.video_url);\n            }\n            else { //Image media\n                url_list.push(requestData.display_url);\n            }\n        }\n        return {\n            results_number: url_list.length,\n            url_list,\n            post_info: formatPostInfo(requestData),\n            media_details\n        };\n    }\n    catch (err) {\n        throw new Error(`Failed to create output data: ${err.message}`);\n    }\n}\n"],
  "mappings": "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",
  "names": ["axios", "qs"]
}
