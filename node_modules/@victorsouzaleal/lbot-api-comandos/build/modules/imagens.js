import axios from 'axios';
import { obterNomeAleatorio } from '../lib/util.js';
import duration from 'format-duration-time';
import google from '@victorsouzaleal/googlethis';
import FormData from 'form-data';
import getEmojiMixUrl, { checkSupported } from 'emoji-mixer';
import { ImageUploadService } from 'node-upload-images';
export const imagemUpload = async (bufferImagem) => {
    return new Promise(async (resolve, reject) => {
        try {
            let resposta = {};
            const service = new ImageUploadService('pixhost.to');
            await service.uploadFromBinary(bufferImagem, obterNomeAleatorio("png")).then(({ directLink }) => {
                resposta.resultado = directLink;
                resolve(resposta);
            }).catch(() => {
                resposta.erro = `Houve um erro no upload da imagem`;
                reject(resposta);
            });
        }
        catch (err) {
            console.log(`API imagemUpload - ${err.message}`);
            reject({ erro: `Houve um erro no upload da imagem` });
        }
    });
};
export const misturarEmojis = async (emoji1, emoji2) => {
    return new Promise(async (resolve, reject) => {
        try {
            let resposta = {};
            let suporteEmoji1 = checkSupported(emoji1, true), suporteEmoji2 = checkSupported(emoji2, true);
            if (!suporteEmoji1 || !suporteEmoji2) {
                if (!suporteEmoji1)
                    resposta.erro = `${emoji1} não é válido para a união.`;
                if (!suporteEmoji2 && suporteEmoji1)
                    resposta.erro = `${emoji2} não é válido para a união`;
                if (!suporteEmoji2 && !suporteEmoji1)
                    resposta.erro = `${emoji1} e ${emoji2} não são válidos para a união.`;
                reject(resposta);
            }
            let emojiUrl = getEmojiMixUrl(emoji1, emoji2, false, true);
            if (emojiUrl != undefined) {
                await axios.get(emojiUrl, { responseType: 'arraybuffer' }).then(({ data }) => {
                    resposta.resultado = data;
                    resolve(resposta);
                }).catch(() => {
                    resposta.erro = "Houve um erro no download do emoji";
                    reject(resposta);
                });
            }
            else {
                resposta.erro = "Emojis não compatíveis para união";
                reject(resposta);
            }
        }
        catch (err) {
            console.log(`API misturarEmojis- ${err.message}`);
            reject({ erro: "Emojis não compatíveis" });
        }
    });
};
export const removerFundo = async (bufferImagem) => {
    return new Promise(async (resolve, reject) => {
        try {
            let resposta = {};
            //Upload da imagem
            let nomeArquivo = obterNomeAleatorio("png");
            let formDataUpload = new FormData();
            formDataUpload.append('files', bufferImagem, { filename: nomeArquivo });
            let config = {
                method: 'post',
                maxBodyLength: Infinity,
                url: 'https://download1.imageonline.co/ajax_upload_file.php',
                headers: Object.assign({ 'User-Agent': ' Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0', 'Accept': ' */*', 'Origin': ' https://imageonline.co', 'Connection': ' keep-alive', 'Referer': ' https://imageonline.co/', 'Sec-Fetch-Dest': ' empty', 'Sec-Fetch-Mode': ' cors', 'Sec-Fetch-Site': ' same-site' }, formDataUpload.getHeaders()),
                data: formDataUpload
            };
            let respostaUpload = await axios.request(config).catch(() => {
                resposta.erro = "Erro no servidor de upload";
                reject(resposta);
            });
            let dadosUpload = JSON.parse(JSON.stringify(respostaUpload === null || respostaUpload === void 0 ? void 0 : respostaUpload.data));
            if (!dadosUpload.isSuccess) {
                resposta.erro = "Tamanho da foto excedeu o limite";
                reject(resposta);
            }
            // Remoção de fundo
            let formDataRemove = new FormData();
            formDataRemove.append('name', dadosUpload.files[0].name);
            formDataRemove.append('originalname', dadosUpload.files[0].old_name);
            formDataRemove.append('option3', dadosUpload.files[0].extension);
            formDataRemove.append('option4', '1');
            config = {
                method: 'post',
                maxBodyLength: Infinity,
                url: 'https://download1.imageonline.co/pngmaker.php',
                headers: {
                    'User-Agent': ' Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0',
                    'Accept': ' */*',
                    'Origin': ' https://imageonline.co',
                    'Connection': ' keep-alive',
                    'Referer': ' https://imageonline.co/',
                    'Sec-Fetch-Dest': ' empty',
                    'Sec-Fetch-Mode': ' cors',
                    'Sec-Fetch-Site': ' same-site'
                },
                data: formDataRemove
            };
            let respostaFotoUrl = await axios.request(config).catch(() => {
                resposta.erro = "Erro no servidor de remover o fundo";
                reject(resposta);
            });
            let fotoUrl = respostaFotoUrl === null || respostaFotoUrl === void 0 ? void 0 : respostaFotoUrl.data.match(/https:\/\/download1\.imageonline\.co\/download\.php\?filename=[A-Za-z0-9]+-imageonline\.co-[0-9]+\.png/m);
            await axios.get(fotoUrl[0], { responseType: 'arraybuffer' }).then((imagemBufferResposta) => {
                resposta.resultado = imagemBufferResposta.data;
                resolve(resposta);
            }).catch(() => {
                resposta.erro = "Erro ao baixar a imagem sem fundo";
                reject(resposta);
            });
        }
        catch (err) {
            console.log(`API removerFundo - ${err.message}`);
            reject({ erro: "Erro geral ao remover o fundo." });
        }
    });
};
export const obterAnimeInfo = async (bufferImagem) => {
    return new Promise(async (resolve, reject) => {
        try {
            let resposta = {};
            await fetch(`https://api.trace.moe/search?anilistInfo`, {
                method: "POST",
                body: bufferImagem,
                headers: { "Content-type": "image/jpeg" },
            }).then(async (res) => {
                let data = await res.json();
                res = await res.json();
                let msInicio = Math.round(data.result[0].from * 1000), msFinal = Math.round(data.result[0].to * 1000);
                let tempoInicial = duration.default(msInicio).format("h:mm:ss");
                let tempoFinal = duration.default(msFinal).format("h:mm:ss");
                let episodio = data.result[0].episode;
                let titulo = data.result[0].anilist.title.english || data.result[0].anilist.title.romaji;
                let similaridade = (data.result[0].similarity * 100).toFixed(2);
                let previaLink = data.result[0].video;
                resposta.resultado = {
                    tempoInicial,
                    tempoFinal,
                    episodio,
                    titulo,
                    similaridade,
                    link_previa: previaLink
                };
                resolve(resposta);
            }).catch(err => {
                if (err.status == 429) {
                    resposta.erro = 'Muitas solicitações sendo feitas, tente novamente mais tarde.';
                    reject(resposta);
                }
                else if (err.status == 400) {
                    resposta.erro = 'Não foi possível achar resultados para esta imagem';
                    reject(resposta);
                }
                else {
                    resposta.erro = 'Houve um erro no servidor de pesquisa de anime.';
                    reject(resposta);
                }
            });
        }
        catch (err) {
            console.log(`API obterAnimeInfo - ${err.message}`);
            reject({ erro: 'Houve um erro no servidor de pesquisa de anime.' });
        }
    });
};
export const obterImagens = async (texto) => {
    return new Promise(async (resolve, reject) => {
        try {
            let resposta = {};
            await google.image(texto, { safe: false, additional_params: { hl: 'pt' } }).then((imagens) => {
                if (imagens.length == 0) {
                    resposta.erro = "Não foi encontrado resultado para esta pesquisa.";
                    reject(resposta);
                }
                else {
                    resposta.resultado = [];
                    for (let imagem of imagens) {
                        if (imagem.preview != undefined)
                            resposta.resultado.push(imagem);
                    }
                    resolve(resposta);
                }
            }).catch(() => {
                resposta.erro = "Houve um erro no servidor de pesquisa de imagens, ou não há resultados para essa pesquisa.";
                reject(resposta);
            });
        }
        catch (err) {
            console.log(`API obterImagens - ${err.message}`);
            reject({ erro: "Houve um erro no servidor de pesquisa de imagens." });
        }
    });
};
